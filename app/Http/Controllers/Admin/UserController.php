<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\User;
use App\Models\Role;
use App\Models\Permission;
use Illuminate\Support\Facades\Hash;

class UserController extends Controller
{
    public function index(Request $request)
    {
        $search = $request->input('search');

        $users = User::with('roles') // L·∫•y danh s√°ch users k√®m roles
            ->when($search, function ($query, $search) {
                return $query->where('name', 'like', "%{$search}%")
                    ->orWhere('email', 'like', "%{$search}%");
            })
            ->orderBy('id', 'desc') // üî• User m·ªõi nh·∫•t l√™n ƒë·∫ßu
            ->paginate(7);

        return view('admin.users.index', compact('users'));
    }



    public function create()
    {
        $roles = Role::all();
        $permissions = Permission::all();
        return view('admin.users.create', compact('roles', 'permissions'));
    }

    public function store(Request $request)
    {

        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email|unique:users',
            'password' => 'required|string|min:6|confirmed',
            'roles' => 'required|array', // ƒê·∫£m b·∫£o roles l√† m·∫£ng
        ], [
            'password.confirmed' => 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp, vui l√≤ng nh·∫≠p l·∫°i!',
            'password.min' => 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.',
        ]);
        // N·∫øu x√°c nh·∫≠n m·∫≠t kh·∫©u sai

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        // üõ† G√°n Role (d√πng t√™n thay v√¨ ID)
        if ($request->has('roles')) {
            $user->syncRoles($request->roles);
        }

        // üõ† G√°n Permission (d√πng t√™n)
        if ($request->has('permissions')) {
            $user->syncPermissions($request->permissions);
        }

        return redirect()->route('users.index')->with('success', 'Th√™m User th√†nh c√¥ng!');
    }



    public function edit($id)
    {
        $user = User::findOrFail($id);
        $roles = Role::all(); // L·∫•y danh s√°ch t·∫•t c·∫£ Role
        $permissions = Permission::all();
        return view('admin.users.edit', compact('user', 'roles', 'permissions'));
    }


    public function update(Request $request, $id)
    {
        $user = User::findOrFail($id);

        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email|unique:users,email,' . $id,
        ]);

        $user->update([
            'name' => $request->name,
            'email' => $request->email,
        ]);

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u n·∫øu c√≥
        if ($request->filled('password')) {
            $user->update([
                'password' => Hash::make($request->password),
            ]);
        }

        // üõ† C·∫≠p nh·∫≠t Roles (ph·∫£i l√† array)
        if ($request->has('roles')) {
            $user->syncRoles($request->roles);
        }

        // üõ† C·∫≠p nh·∫≠t Permissions
        if ($request->has('permissions')) {
            $user->syncPermissions($request->permissions);
        }

        return redirect()->route('users.index')->with('success', 'C·∫≠p nh·∫≠t User th√†nh c√¥ng!');
    }



    public function destroy(User $user)
    {
        $user->delete();
        return redirect()->route('users.index')->with('success', 'X√≥a th√†nh c√¥ng!');
    }
}
