<?php

namespace App\Modules\Products\app\Http\Controllers;

use App\Modules\Category\app\Models\Category;
use App\Modules\ProductGallery\app\Models\ProductGallery;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use App\Http\Controllers\Controller;
use App\Modules\Products\app\Models\Product;

class ProductController extends Controller
{
    public function index(Request $request)
    {
        $search = $request->input('search');

        $products = Product::when($search, function ($query, $search) {
            return $query->where('name', 'like', "%{$search}%");
        })->with('category')
            ->orderBy('id', 'desc')
            ->paginate(5);

        return view('products::index', compact('products'));
    }

    public function create()
    {
        $categories = Category::all();
        return view('products::create', compact('categories'));
    }

    public function store(Request $request)
    {
        $request->validate(
            [
                'name' => 'required|string|max:255|unique:products,name',
                'price' => 'required|numeric|min:0',
                'category_id' => 'required|exists:categories,id',
                'description' => 'nullable|string',
                'images.*' => 'image|mimes:jpeg,png,jpg,gif,webp'
            ],
            [
                'name.unique' => 'T√™n s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√™n kh√°c.',
                'images.*.image' => 'T·ªáp t·∫£i l√™n ph·∫£i l√† h√¨nh ·∫£nh.',
                'images.*.mimes' => 'H√¨nh ·∫£nh ph·∫£i c√≥ ƒë·ªãnh d·∫°ng jpeg, png, jpg, gif ho·∫∑c webp.',
            ]
        );

        // üü¢ L∆∞u s·∫£n ph·∫©m tr∆∞·ªõc khi l∆∞u ·∫£nh
        $product = Product::create([
            'name' => $request->name,
            'price' => $request->price,
            'category_id' => $request->category_id,
            'description' => strip_tags($request->description), // Lo·∫°i b·ªè HTML
        ]);

        // üü¢ Ki·ªÉm tra n·∫øu c√≥ h√¨nh ·∫£nh th√¨ l∆∞u v√†o b·∫£ng `products_gallery`
        if ($request->hasFile('images')) {
            foreach ($request->file('images') as $image) {
                $path = $image->store('products', 'public');

                ProductGallery::create([
                    'product_id' => $product->id, // üü¢ Ch·∫Øc ch·∫Øn c√≥ ID s·∫£n ph·∫©m
                    'image_path' => $path
                ]);
            }
        }

        return redirect()->route('products.index')->with('success', 'Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!');
    }


    public function edit($id)
    {
        $categories = Category::all();
        $product = Product::with('gallery')->findOrFail($id); // Load quan h·ªá ƒë√∫ng
        return view('products::edit', compact('product', 'categories'));
    }



    public function update(Request $request, Product $product)
    {
        $request->validate(
            [
                'name' => 'required|string|max:255|unique:products,name',
                'price' => 'required|numeric|min:0',
                'category_id' => 'required|exists:categories,id',
                'description' => 'nullable|string',
                'images.*' => 'image|mimes:jpeg,png,jpg,gif,webp'
            ],
            [
                'name.unique' => 'T√™n s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√™n kh√°c.',
                'images.*.image' => 'T·ªáp t·∫£i l√™n ph·∫£i l√† h√¨nh ·∫£nh.',
                'images.*.mimes' => 'H√¨nh ·∫£nh ph·∫£i c√≥ ƒë·ªãnh d·∫°ng jpeg, png, jpg, gif ho·∫∑c webp.',
            ]
        );
        // Lo·∫°i b·ªè c√°c th·∫ª HTML trong m√¥ t·∫£
        $description = strip_tags($request->input('description'));

        // C·∫≠p nh·∫≠t s·∫£n ph·∫©m v·ªõi m√¥ t·∫£ kh√¥ng c√≥ th·∫ª HTML
        $product->update([
            'name' => $request->input('name'),
            'price' => $request->input('price'),
            'category_id' => $request->input('category_id'),
            'description' => $description, // C·∫≠p nh·∫≠t m√¥ t·∫£ ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè th·∫ª HTML
        ]);

        // X·ª≠ l√Ω h√¨nh ·∫£nh
        if ($request->hasFile('images')) {
            // X√≥a h√¨nh ·∫£nh c≈© n·∫øu c√≥
            if ($product->gallery && $product->gallery->count() > 0) {
                foreach ($product->gallery as $image) {
                    Storage::delete('public/' . $image->image_path);
                    $image->delete();
                }
            }

            // L∆∞u h√¨nh ·∫£nh m·ªõi
            foreach ($request->file('images') as $image) {
                $path = $image->store('products', 'public');
                ProductGallery::create([
                    'product_id' => $product->id,
                    'image_path' => $path
                ]);
            }
        }

        return redirect()->route('products.index')->with('success', 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!');
    }


    public function destroy(Product $product)
    {
        $product->delete();
        return redirect()->route('products.index')->with('success', 'X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!');
    }
    public function show($id)
    {
        $product = Product::with('category', 'gallery')->findOrFail($id); // L·∫•y s·∫£n ph·∫©m theo ID

        return view('products::show', compact('product')); // Tr·∫£ v·ªÅ view v·ªõi th√¥ng tin s·∫£n ph·∫©m
    }
}
